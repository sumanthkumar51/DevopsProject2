pipeline {
    agent any

    environment {
        KUBECTL = '/usr/local/bin/kubectl'
    }

    parameters {
        string(name: 'CLUSTER_NAME', defaultValue: 'amazon-prime-cluster', description: 'Enter your EKS cluster name')
    }

    stages {
        stage("Login to EKS") {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'access-key', variable: 'AWS_ACCESS_KEY'),
                        string(credentialsId: 'secret-key', variable: 'AWS_SECRET_KEY')
                    ]) {
                        sh "aws eks --region us-east-1 update-kubeconfig --name ${params.CLUSTER_NAME}"
                    }
                }
            }
        }

        stage("Configure Prometheus & Grafana") {
            steps {
                script {
                    sh """
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                    helm repo update

                    # Ensure 'prometheus' namespace exists
                    if ! kubectl get namespace prometheus > /dev/null 2>&1; then
                        kubectl create namespace prometheus
                    fi

                    # Install or upgrade Prometheus stack
                    if helm list -n prometheus | grep kube-prometheus > /dev/null 2>&1; then
                        helm upgrade kube-prometheus prometheus-community/kube-prometheus-stack -n prometheus
                    else
                        helm install kube-prometheus prometheus-community/kube-prometheus-stack -n prometheus
                    fi

                    # Patch Prometheus and Grafana services to LoadBalancer type
                    kubectl patch svc kube-prometheus-kube-prometheus-prometheus -n prometheus -p '{"spec": {"type": "LoadBalancer"}}' || true
                    kubectl patch svc kube-prometheus-grafana -n prometheus -p '{"spec": {"type": "LoadBalancer"}}' || true
                    """
                }
            }
        }

        stage("Configure ArgoCD") {
            steps {
                script {
                    sh """
                    # Install ArgoCD
                    kubectl create namespace argocd || true
                    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

                    # Patch ArgoCD server service to LoadBalancer type
                    kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}' || true
                    """
                }
            }
        }
    }
}
